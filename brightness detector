import cv2
import numpy as np

def main():
    # Initialize the webcam
    cap = cv2.VideoCapture(0)

    while True:
        # Read a frame from the webcam
        ret, frame = cap.read()
        if not ret:
            break

        # Convert the frame to the HSV color space
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # Define the range for white color in HSV
        lower_white = np.array([0, 0, 200])
        upper_white = np.array([180, 25, 255])

        # Create a mask for white areas
        mask = cv2.inRange(hsv, lower_white, upper_white)

        # Apply morphological operations to clean up the mask
        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)  # Close small holes
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)   # Remove small objects

        # Find contours in the mask
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Filter and draw contours
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 500:  # Adjusted for potentially smaller folded areas
                # Approximate the contour to reduce complexity
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)

                # Check if the approximated contour has at least 4 points
                if len(approx) >= 4:
                    # Calculate the aspect ratio
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = float(w) / h

                    # Check if aspect ratio is within a reasonable range for paper
                    if 0.2 < aspect_ratio < 5:  # Allow more variation for folded paper
                        cv2.drawContours(frame, [approx], -1, (0, 255, 0), 2)

        # Display the original frame with detected paper
        cv2.imshow('Paper Detection', frame)

        # Break the loop on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the webcam and close windows
    cap.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
