import cv2
import numpy as np

# Global variable to toggle red box display
show_red_boxes = True

# Constants
MIN_AREA = 500
kernel_open = np.ones((5, 5), np.uint8)
kernel_close = np.ones((7, 7), np.uint8)
colors = ['Yellow', 'Green', 'Blue', 'Red']

def adjust_brightness_and_gamma(frame, gamma=1.0):
    img_float = frame.astype(np.float32) / 255.0
    img_gamma = np.clip(np.power(img_float, gamma), 0, 1)
    img_corrected = (img_gamma * 255).astype(np.uint8)
    gray = cv2.cvtColor(img_corrected, cv2.COLOR_BGR2GRAY)
    average_brightness = np.mean(gray)

    if average_brightness < 100:
        img_corrected = cv2.convertScaleAbs(img_corrected, alpha=1.2, beta=0)
    elif average_brightness > 150:
        img_corrected = cv2.convertScaleAbs(img_corrected, alpha=0.8, beta=0)

    return img_corrected

def adjust_color_range(lower, upper, fuzziness=10):
    return (
        np.array([max(0, lower[0] - fuzziness), lower[1], lower[2]]),
        np.array([min(180, upper[0] + fuzziness), upper[1], upper[2]]),
    )

def detect_colors_and_shapes(frame):
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define color ranges
    yellow_lower, yellow_upper = adjust_color_range(np.array([20, 100, 100]), np.array([30, 255, 255]))
    green_lower, green_upper = adjust_color_range(np.array([30, 100, 100]), np.array([70, 255, 255]))
    blue_lower = np.array([100, 150, 50])  
    blue_upper = np.array([140, 255, 255])  
    red_lower1, red_upper1 = adjust_color_range(np.array([0, 150, 150]), np.array([10, 255, 255]))
    red_lower2, red_upper2 = adjust_color_range(np.array([160, 150, 150]), np.array([180, 255, 255]))
    red_lower = cv2.bitwise_or(cv2.inRange(hsv_frame, red_lower1, red_upper1), cv2.inRange(hsv_frame, red_lower2, red_upper2))

    # Detect colors
    masks = {
        'Yellow': cv2.inRange(hsv_frame, yellow_lower, yellow_upper),
        'Green': cv2.inRange(hsv_frame, green_lower, green_upper),
        'Blue': cv2.inRange(hsv_frame, blue_lower, blue_upper),
        'Red': red_lower,
    }

    # Apply morphological operations
    masks['Yellow'] = cv2.morphologyEx(masks['Yellow'], cv2.MORPH_OPEN, kernel_open)
    masks['Green'] = cv2.morphologyEx(masks['Green'], cv2.MORPH_OPEN, kernel_open)
    masks['Blue'] = cv2.morphologyEx(masks['Blue'], cv2.MORPH_CLOSE, kernel_close)
    masks['Red'] = cv2.morphologyEx(masks['Red'], cv2.MORPH_OPEN, kernel_open)

    # Remove dark areas from the blue mask
    dark_mask = cv2.inRange(hsv_frame, np.array([0, 0, 0]), np.array([180, 255, 50]))
    masks['Blue'] = cv2.bitwise_and(masks['Blue'], cv2.bitwise_not(dark_mask))

    # Shape detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.convertScaleAbs(gray, alpha=1.5, beta=30)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    shapes = []
    for contour in contours:
        if cv2.contourArea(contour) < 300:
            continue

        epsilon = 0.05 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        num_vertices = len(approx)

        if num_vertices == 3:
            shape_type = "Triangle"
        elif num_vertices == 4:
            x, y, w, h = cv2.boundingRect(approx)
            aspect_ratio = float(w) / h
            shape_type = "Square" if 0.85 < aspect_ratio < 1.15 else "Rectangle"
        else:
            shape_type = "Other"

        M = cv2.moments(contour)
        if M["m00"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
        else:
            cX, cY = 0, 0

        shapes.append((contour, shape_type, (cX, cY)))

    return shapes, masks

def draw_shapes_and_boxes(frame, shapes, masks):
    result_frame = frame.copy()

    # Draw Shapes
    for contour, shape, center in shapes:
        cv2.drawContours(result_frame, [contour], -1, (0, 165, 255), 2)
        cX, cY = center
        cv2.putText(result_frame, shape, (cX - 50, cY), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 165, 255), 2)

    # Draw Color Bounding Boxes
    for color, mask in masks.items():
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        largest_area = 0
        largest_contour = None

        for contour in contours:
            area = cv2.contourArea(contour)
            if area > MIN_AREA and area > largest_area:
                largest_area = area
                largest_contour = contour

        if largest_contour is not None:
            x, y, w, h = cv2.boundingRect(largest_contour)
            cv2.rectangle(result_frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(result_frame, color, (x + 5, y + h - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        if show_red_boxes:
            for contour in contours:
                if contour is not largest_contour and cv2.contourArea(contour) > MIN_AREA:
                    x, y, w, h = cv2.boundingRect(contour)
                    cv2.rectangle(result_frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
                    cv2.putText(result_frame, color, (x + 5, y + h - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)

    return result_frame

def draw_toggle_button(frame):
    button_x, button_y = 10, 10
    button_width, button_height = 200, 50
    cv2.rectangle(frame, (button_x, button_y), (button_x + button_width, button_y + button_height), (200, 200, 200), -1)
    text = "Toggle Red Boxes" if show_red_boxes else "Red Boxes Off"
    cv2.putText(frame, text, (button_x + 5, button_y + 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)

def mouse_callback(event, x, y, flags, param):
    global show_red_boxes
    button_x, button_y = 10, 10
    button_width, button_height = 200, 50

    if event == cv2.EVENT_LBUTTONDOWN:
        if (button_x <= x <= button_x + button_width) and (button_y <= y <= button_y + button_height):
            show_red_boxes = not show_red_boxes

def main():
    global show_red_boxes
    cap = cv2.VideoCapture(0)

    cv2.namedWindow("Detected Shapes and Colors")
    cv2.setMouseCallback("Detected Shapes and Colors", mouse_callback)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        frame = cv2.flip(frame, 1)  # Flip around the vertical axis
        frame = adjust_brightness_and_gamma(frame, gamma=1.2)

        # Detect shapes and colors in a single function
        shapes, masks = detect_colors_and_shapes(frame)

        # Draw shapes and bounding boxes on the frame
        result_frame = draw_shapes_and_boxes(frame, shapes, masks)

        # Draw the toggle button
        draw_toggle_button(result_frame)

        # Show the frame
        cv2.imshow("Detected Shapes and Colors", result_frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
