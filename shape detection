import cv2
import numpy as np

# Adjust brightness and contrast
def adjust_brightness_contrast(frame, alpha=1.3, beta=30):
    return cv2.convertScaleAbs(frame, alpha=alpha, beta=beta)

# Shape detection
def detect_shapes(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = adjust_brightness_contrast(gray, alpha=1.5, beta=30)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    shapes = []
    
    # Loop through each contour
    for contour in contours:
        if cv2.contourArea(contour) < 300:  # Ignore small contours
            continue

        epsilon = 0.05 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        num_vertices = len(approx)

        if num_vertices == 3:
            shape_type = "Triangle"
        elif num_vertices == 4:
            x, y, w, h = cv2.boundingRect(approx)
            aspect_ratio = float(w) / h
            if 0.85 < aspect_ratio < 1.15:
                shape_type = "Square"
            else:
                shape_type = "Rectangle"
        else:
            shape_type = "Other"

        # Get center of the contour
        M = cv2.moments(contour)
        if M["m00"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
        else:
            cX, cY = 0, 0

        shapes.append((contour, shape_type, (cX, cY)))

    return shapes, frame

# Draw shapes
def draw_shapes(frame, shapes):
    result_frame = frame.copy()
    
    for contour, shape, center in shapes:
        cv2.drawContours(result_frame, [contour], -1, (0, 255, 0), 2)
        cX, cY = center
        cv2.putText(result_frame, shape, (cX - 50, cY), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

    return result_frame

# Match shapes between frames with persistence logic
def match_shapes(prev_shapes, new_shapes, max_distance=50, max_frames=10):
    matched_shapes = []
    new_shape_centers = []

    # Extract centers of the new shapes
    for contour, shape, (cX_new, cY_new) in new_shapes:
        new_shape_centers.append((cX_new, cY_new, contour, shape))

    # Compare with previous shapes
    for cX_new, cY_new, new_contour, new_shape in new_shape_centers:
        best_match = None
        min_distance = max_distance

        for prev_contour, prev_shape, prev_center, age in prev_shapes:
            cX_prev, cY_prev = prev_center

            # Calculate distance between new and previous shape centers
            distance = np.sqrt((cX_new - cX_prev) ** 2 + (cY_new - cY_prev) ** 2)

            # Match shapes based on proximity and persistence (age)
            if distance < min_distance:
                min_distance = distance
                best_match = (prev_contour, prev_shape, prev_center, age + 1)  # Increase persistence

        # If a match is found, update it, else consider it as a new shape
        if best_match:
            matched_shapes.append(best_match)
        else:
            matched_shapes.append((new_contour, new_shape, (cX_new, cY_new), 1))  # New shape starts with age 1

    return matched_shapes

# Main function
def main():
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("Error: Could not open video stream.")
        return
    
    prev_shapes = []  # Store shapes across frames (including their "age")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame")
            break

        # Detect shapes in the current frame
        new_shapes, result_frame = detect_shapes(frame)

        # Match current shapes to previous shapes (track over frames)
        matched_shapes = match_shapes(prev_shapes, new_shapes)

        # Draw matched shapes
        result_frame = draw_shapes(result_frame, [(contour, shape, center) for contour, shape, center, _ in matched_shapes])

        # Update the previous shape list (track for next frame)
        prev_shapes = [(contour, shape, center, age) for contour, shape, center, age in matched_shapes]
        
        # Display the result
        cv2.imshow("Detected Shapes", result_frame)

        # Break the loop when the user presses 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Run the main function
if __name__ == "__main__":
    main()
